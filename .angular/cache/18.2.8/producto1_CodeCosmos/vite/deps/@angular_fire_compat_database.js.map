{
  "version": 3,
  "sources": ["../../../../../../node_modules/@firebase/app-check/dist/esm/index.esm2017.js", "../../../../../../node_modules/@angular/fire/fesm2022/angular-fire-app-check.mjs", "../../../../../../node_modules/@angular/fire/fesm2022/angular-fire-compat-auth.mjs", "../../../../../../node_modules/@firebase/database-compat/dist/index.esm2017.js", "../../../../../../node_modules/@angular/fire/fesm2022/angular-fire-compat-database.mjs"],
  "sourcesContent": ["import { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Deferred, ErrorFactory, isIndexedDBAvailable, uuidv4, getGlobal, base64, issuedAtTime, calculateBackoffMillis, getModularInstance } from '@firebase/util';\nimport { Logger } from '@firebase/logger';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst APP_CHECK_STATES = new Map();\nconst DEFAULT_STATE = {\n  activated: false,\n  tokenObservers: []\n};\nconst DEBUG_STATE = {\n  initialized: false,\n  enabled: false\n};\n/**\r\n * Gets a reference to the state object.\r\n */\nfunction getStateReference(app) {\n  return APP_CHECK_STATES.get(app) || Object.assign({}, DEFAULT_STATE);\n}\n/**\r\n * Set once on initialization. The map should hold the same reference to the\r\n * same object until this entry is deleted.\r\n */\nfunction setInitialState(app, state) {\n  APP_CHECK_STATES.set(app, state);\n  return APP_CHECK_STATES.get(app);\n}\nfunction getDebugState() {\n  return DEBUG_STATE;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst BASE_ENDPOINT = 'https://content-firebaseappcheck.googleapis.com/v1';\nconst EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaV3Token';\nconst EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD = 'exchangeRecaptchaEnterpriseToken';\nconst EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\nconst TOKEN_REFRESH_TIME = {\n  /**\r\n   * The offset time before token natural expiration to run the refresh.\r\n   * This is currently 5 minutes.\r\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n  /**\r\n   * This is the first retrial wait after an error. This is currently\r\n   * 30 seconds.\r\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n  /**\r\n   * This is the maximum retrial wait, currently 16 minutes.\r\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n/**\r\n * One day in millis, for certain error code backoffs.\r\n */\nconst ONE_DAY = 24 * 60 * 60 * 1000;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Port from auth proactiverefresh.js\r\n *\r\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\nclass Refresher {\n  constructor(operation, retryPolicy, getWaitDuration, lowerBound, upperBound) {\n    this.operation = operation;\n    this.retryPolicy = retryPolicy;\n    this.getWaitDuration = getWaitDuration;\n    this.lowerBound = lowerBound;\n    this.upperBound = upperBound;\n    this.pending = null;\n    this.nextErrorWaitInterval = lowerBound;\n    if (lowerBound > upperBound) {\n      throw new Error('Proactive refresh lower bound greater than upper bound!');\n    }\n  }\n  start() {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(() => {\n      /* we don't care about the result */\n    });\n  }\n  stop() {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  }\n  isRunning() {\n    return !!this.pending;\n  }\n  async process(hasSucceeded) {\n    this.stop();\n    try {\n      this.pending = new Deferred();\n      this.pending.promise.catch(_e => {\n        /* ignore */\n      });\n      await sleep(this.getNextRun(hasSucceeded));\n      // Why do we resolve a promise, then immediate wait for it?\n      // We do it to make the promise chain cancellable.\n      // We can call stop() which rejects the promise before the following line execute, which makes\n      // the code jump to the catch block.\n      // TODO: unit test this\n      this.pending.resolve();\n      await this.pending.promise;\n      this.pending = new Deferred();\n      this.pending.promise.catch(_e => {\n        /* ignore */\n      });\n      await this.operation();\n      this.pending.resolve();\n      await this.pending.promise;\n      this.process(true).catch(() => {\n        /* we don't care about the result */\n      });\n    } catch (error) {\n      if (this.retryPolicy(error)) {\n        this.process(false).catch(() => {\n          /* we don't care about the result */\n        });\n      } else {\n        this.stop();\n      }\n    }\n  }\n  getNextRun(hasSucceeded) {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound;\n      // Return typical wait duration interval after a successful operation.\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      const currentErrorWaitInterval = this.nextErrorWaitInterval;\n      // Double interval for next consecutive error.\n      this.nextErrorWaitInterval *= 2;\n      // Make sure next wait interval does not exceed the maximum upper bound.\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n      return currentErrorWaitInterval;\n    }\n  }\n}\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst ERRORS = {\n  [\"already-initialized\" /* AppCheckError.ALREADY_INITIALIZED */]: 'You have already called initializeAppCheck() for FirebaseApp {$appName} with ' + 'different options. To avoid this error, call initializeAppCheck() with the ' + 'same options as when it was originally called. This will return the ' + 'already initialized instance.',\n  [\"use-before-activation\" /* AppCheckError.USE_BEFORE_ACTIVATION */]: 'App Check is being used before initializeAppCheck() is called for FirebaseApp {$appName}. ' + 'Call initializeAppCheck() before instantiating other Firebase services.',\n  [\"fetch-network-error\" /* AppCheckError.FETCH_NETWORK_ERROR */]: 'Fetch failed to connect to a network. Check Internet connection. ' + 'Original error: {$originalErrorMessage}.',\n  [\"fetch-parse-error\" /* AppCheckError.FETCH_PARSE_ERROR */]: 'Fetch client could not parse response.' + ' Original error: {$originalErrorMessage}.',\n  [\"fetch-status-error\" /* AppCheckError.FETCH_STATUS_ERROR */]: 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [\"storage-open\" /* AppCheckError.STORAGE_OPEN */]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [\"storage-get\" /* AppCheckError.STORAGE_GET */]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [\"storage-set\" /* AppCheckError.STORAGE_WRITE */]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [\"recaptcha-error\" /* AppCheckError.RECAPTCHA_ERROR */]: 'ReCAPTCHA error.',\n  [\"throttled\" /* AppCheckError.THROTTLED */]: `Requests throttled due to {$httpStatus} error. Attempts allowed again after {$time}`\n};\nconst ERROR_FACTORY = new ErrorFactory('appCheck', 'AppCheck', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction getRecaptcha(isEnterprise = false) {\n  var _a;\n  if (isEnterprise) {\n    return (_a = self.grecaptcha) === null || _a === void 0 ? void 0 : _a.enterprise;\n  }\n  return self.grecaptcha;\n}\nfunction ensureActivated(app) {\n  if (!getStateReference(app).activated) {\n    throw ERROR_FACTORY.create(\"use-before-activation\" /* AppCheckError.USE_BEFORE_ACTIVATION */, {\n      appName: app.name\n    });\n  }\n}\nfunction getDurationString(durationInMillis) {\n  const totalSeconds = Math.round(durationInMillis / 1000);\n  const days = Math.floor(totalSeconds / (3600 * 24));\n  const hours = Math.floor((totalSeconds - days * 3600 * 24) / 3600);\n  const minutes = Math.floor((totalSeconds - days * 3600 * 24 - hours * 3600) / 60);\n  const seconds = totalSeconds - days * 3600 * 24 - hours * 3600 - minutes * 60;\n  let result = '';\n  if (days) {\n    result += pad(days) + 'd:';\n  }\n  if (hours) {\n    result += pad(hours) + 'h:';\n  }\n  result += pad(minutes) + 'm:' + pad(seconds) + 's';\n  return result;\n}\nfunction pad(value) {\n  if (value === 0) {\n    return '00';\n  }\n  return value >= 10 ? value.toString() : '0' + value;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nasync function exchangeToken({\n  url,\n  body\n}, heartbeatServiceProvider) {\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  // If heartbeat service exists, add heartbeat header string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers['X-Firebase-Client'] = heartbeatsHeader;\n    }\n  }\n  const options = {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers\n  };\n  let response;\n  try {\n    response = await fetch(url, options);\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(\"fetch-network-error\" /* AppCheckError.FETCH_NETWORK_ERROR */, {\n      originalErrorMessage: originalError === null || originalError === void 0 ? void 0 : originalError.message\n    });\n  }\n  if (response.status !== 200) {\n    throw ERROR_FACTORY.create(\"fetch-status-error\" /* AppCheckError.FETCH_STATUS_ERROR */, {\n      httpStatus: response.status\n    });\n  }\n  let responseBody;\n  try {\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    responseBody = await response.json();\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(\"fetch-parse-error\" /* AppCheckError.FETCH_PARSE_ERROR */, {\n      originalErrorMessage: originalError === null || originalError === void 0 ? void 0 : originalError.message\n    });\n  }\n  // Protobuf duration format.\n  // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n  const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n  if (!match || !match[2] || isNaN(Number(match[1]))) {\n    throw ERROR_FACTORY.create(\"fetch-parse-error\" /* AppCheckError.FETCH_PARSE_ERROR */, {\n      originalErrorMessage: `ttl field (timeToLive) is not in standard Protobuf Duration ` + `format: ${responseBody.ttl}`\n    });\n  }\n  const timeToLiveAsNumber = Number(match[1]) * 1000;\n  const now = Date.now();\n  return {\n    token: responseBody.token,\n    expireTimeMillis: now + timeToLiveAsNumber,\n    issuedAtTimeMillis: now\n  };\n}\nfunction getExchangeRecaptchaV3TokenRequest(app, reCAPTCHAToken) {\n  const {\n    projectId,\n    appId,\n    apiKey\n  } = app.options;\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_v3_token': reCAPTCHAToken\n    }\n  };\n}\nfunction getExchangeRecaptchaEnterpriseTokenRequest(app, reCAPTCHAToken) {\n  const {\n    projectId,\n    appId,\n    apiKey\n  } = app.options;\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_enterprise_token': reCAPTCHAToken\n    }\n  };\n}\nfunction getExchangeDebugTokenRequest(app, debugToken) {\n  const {\n    projectId,\n    appId,\n    apiKey\n  } = app.options;\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst DB_NAME = 'firebase-app-check-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-app-check-store';\nconst DEBUG_TOKEN_KEY = 'debug-token';\nlet dbPromise = null;\nfunction getDBPromise() {\n  if (dbPromise) {\n    return dbPromise;\n  }\n  dbPromise = new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        resolve(event.target.result);\n      };\n      request.onerror = event => {\n        var _a;\n        reject(ERROR_FACTORY.create(\"storage-open\" /* AppCheckError.STORAGE_OPEN */, {\n          originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n        }));\n      };\n      request.onupgradeneeded = event => {\n        const db = event.target.result;\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(ERROR_FACTORY.create(\"storage-open\" /* AppCheckError.STORAGE_OPEN */, {\n        originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\n      }));\n    }\n  });\n  return dbPromise;\n}\nfunction readTokenFromIndexedDB(app) {\n  return read(computeKey(app));\n}\nfunction writeTokenToIndexedDB(app, token) {\n  return write(computeKey(app), token);\n}\nfunction writeDebugTokenToIndexedDB(token) {\n  return write(DEBUG_TOKEN_KEY, token);\n}\nfunction readDebugTokenFromIndexedDB() {\n  return read(DEBUG_TOKEN_KEY);\n}\nasync function write(key, value) {\n  const db = await getDBPromise();\n  const transaction = db.transaction(STORE_NAME, 'readwrite');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.put({\n    compositeKey: key,\n    value\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = _event => {\n      resolve();\n    };\n    transaction.onerror = event => {\n      var _a;\n      reject(ERROR_FACTORY.create(\"storage-set\" /* AppCheckError.STORAGE_WRITE */, {\n        originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n      }));\n    };\n  });\n}\nasync function read(key) {\n  const db = await getDBPromise();\n  const transaction = db.transaction(STORE_NAME, 'readonly');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.get(key);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      const result = event.target.result;\n      if (result) {\n        resolve(result.value);\n      } else {\n        resolve(undefined);\n      }\n    };\n    transaction.onerror = event => {\n      var _a;\n      reject(ERROR_FACTORY.create(\"storage-get\" /* AppCheckError.STORAGE_GET */, {\n        originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n      }));\n    };\n  });\n}\nfunction computeKey(app) {\n  return `${app.options.appId}-${app.name}`;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst logger = new Logger('@firebase/app-check');\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\r\n */\nasync function readTokenFromStorage(app) {\n  if (isIndexedDBAvailable()) {\n    let token = undefined;\n    try {\n      token = await readTokenFromIndexedDB(app);\n    } catch (e) {\n      // swallow the error and return undefined\n      logger.warn(`Failed to read token from IndexedDB. Error: ${e}`);\n    }\n    return token;\n  }\n  return undefined;\n}\n/**\r\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\r\n */\nfunction writeTokenToStorage(app, token) {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(e => {\n      // swallow the error and resolve the promise\n      logger.warn(`Failed to write token to IndexedDB. Error: ${e}`);\n    });\n  }\n  return Promise.resolve();\n}\nasync function readOrCreateDebugTokenFromStorage() {\n  /**\r\n   * Theoretically race condition can happen if we read, then write in 2 separate transactions.\r\n   * But it won't happen here, because this function will be called exactly once.\r\n   */\n  let existingDebugToken = undefined;\n  try {\n    existingDebugToken = await readDebugTokenFromIndexedDB();\n  } catch (_e) {\n    // failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\n  }\n  if (!existingDebugToken) {\n    // create a new debug token\n    const newToken = uuidv4();\n    // We don't need to block on writing to indexeddb\n    // In case persistence failed, a new debug token will be generated every time the page is refreshed.\n    // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n    // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n    // You should switch to a different browser that supports indexeddb\n    writeDebugTokenToIndexedDB(newToken).catch(e => logger.warn(`Failed to persist debug token to IndexedDB. Error: ${e}`));\n    return newToken;\n  } else {\n    return existingDebugToken;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isDebugMode() {\n  const debugState = getDebugState();\n  return debugState.enabled;\n}\nasync function getDebugToken() {\n  const state = getDebugState();\n  if (state.enabled && state.token) {\n    return state.token.promise;\n  } else {\n    // should not happen!\n    throw Error(`\n            Can't get debug token in production mode.\n        `);\n  }\n}\nfunction initializeDebugMode() {\n  const globals = getGlobal();\n  const debugState = getDebugState();\n  // Set to true if this function has been called, whether or not\n  // it enabled debug mode.\n  debugState.initialized = true;\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' && globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true) {\n    return;\n  }\n  debugState.enabled = true;\n  const deferredToken = new Deferred();\n  debugState.token = deferredToken;\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\nconst defaultTokenErrorData = {\n  error: 'UNKNOWN_ERROR'\n};\n/**\r\n * Stringify and base64 encode token error data.\r\n *\r\n * @param tokenError Error data, currently hardcoded.\r\n */\nfunction formatDummyToken(tokenErrorData) {\n  return base64.encodeString(JSON.stringify(tokenErrorData), /* webSafe= */false);\n}\n/**\r\n * This function always resolves.\r\n * The result will contain an error field if there is any error.\r\n * In case there is an error, the token field in the result will be populated with a dummy value\r\n */\nasync function getToken$2(appCheck, forceRefresh = false) {\n  const app = appCheck.app;\n  ensureActivated(app);\n  const state = getStateReference(app);\n  /**\r\n   * First check if there is a token in memory from a previous `getToken()` call.\r\n   */\n  let token = state.token;\n  let error = undefined;\n  /**\r\n   * If an invalid token was found in memory, clear token from\r\n   * memory and unset the local variable `token`.\r\n   */\n  if (token && !isValid(token)) {\n    state.token = undefined;\n    token = undefined;\n  }\n  /**\r\n   * If there is no valid token in memory, try to load token from indexedDB.\r\n   */\n  if (!token) {\n    // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.\n    const cachedToken = await state.cachedTokenPromise;\n    if (cachedToken) {\n      if (isValid(cachedToken)) {\n        token = cachedToken;\n      } else {\n        // If there was an invalid token in the indexedDB cache, clear it.\n        await writeTokenToStorage(app, undefined);\n      }\n    }\n  }\n  // Return the cached token (from either memory or indexedDB) if it's valid\n  if (!forceRefresh && token && isValid(token)) {\n    return {\n      token: token.token\n    };\n  }\n  // Only set to true if this `getToken()` call is making the actual\n  // REST call to the exchange endpoint, versus waiting for an already\n  // in-flight call (see debug and regular exchange endpoint paths below)\n  let shouldCallListeners = false;\n  /**\r\n   * DEBUG MODE\r\n   * If debug mode is set, and there is no cached token, fetch a new App\r\n   * Check token using the debug token, and return it directly.\r\n   */\n  if (isDebugMode()) {\n    // Avoid making another call to the exchange endpoint if one is in flight.\n    if (!state.exchangeTokenPromise) {\n      state.exchangeTokenPromise = exchangeToken(getExchangeDebugTokenRequest(app, await getDebugToken()), appCheck.heartbeatServiceProvider).finally(() => {\n        // Clear promise when settled - either resolved or rejected.\n        state.exchangeTokenPromise = undefined;\n      });\n      shouldCallListeners = true;\n    }\n    const tokenFromDebugExchange = await state.exchangeTokenPromise;\n    // Write debug token to indexedDB.\n    await writeTokenToStorage(app, tokenFromDebugExchange);\n    // Write debug token to state.\n    state.token = tokenFromDebugExchange;\n    return {\n      token: tokenFromDebugExchange.token\n    };\n  }\n  /**\r\n   * There are no valid tokens in memory or indexedDB and we are not in\r\n   * debug mode.\r\n   * Request a new token from the exchange endpoint.\r\n   */\n  try {\n    // Avoid making another call to the exchange endpoint if one is in flight.\n    if (!state.exchangeTokenPromise) {\n      // state.provider is populated in initializeAppCheck()\n      // ensureActivated() at the top of this function checks that\n      // initializeAppCheck() has been called.\n      state.exchangeTokenPromise = state.provider.getToken().finally(() => {\n        // Clear promise when settled - either resolved or rejected.\n        state.exchangeTokenPromise = undefined;\n      });\n      shouldCallListeners = true;\n    }\n    token = await getStateReference(app).exchangeTokenPromise;\n  } catch (e) {\n    if (e.code === `appCheck/${\"throttled\" /* AppCheckError.THROTTLED */}`) {\n      // Warn if throttled, but do not treat it as an error.\n      logger.warn(e.message);\n    } else {\n      // `getToken()` should never throw, but logging error text to console will aid debugging.\n      logger.error(e);\n    }\n    // Always save error to be added to dummy token.\n    error = e;\n  }\n  let interopTokenResult;\n  if (!token) {\n    // If token is undefined, there must be an error.\n    // Return a dummy token along with the error.\n    interopTokenResult = makeDummyTokenResult(error);\n  } else if (error) {\n    if (isValid(token)) {\n      // It's also possible a valid token exists, but there's also an error.\n      // (Such as if the token is almost expired, tries to refresh, and\n      // the exchange request fails.)\n      // We add a special error property here so that the refresher will\n      // count this as a failed attempt and use the backoff instead of\n      // retrying repeatedly with no delay, but any 3P listeners will not\n      // be hindered in getting the still-valid token.\n      interopTokenResult = {\n        token: token.token,\n        internalError: error\n      };\n    } else {\n      // No invalid tokens should make it to this step. Memory and cached tokens\n      // are checked. Other tokens are from fresh exchanges. But just in case.\n      interopTokenResult = makeDummyTokenResult(error);\n    }\n  } else {\n    interopTokenResult = {\n      token: token.token\n    };\n    // write the new token to the memory state as well as the persistent storage.\n    // Only do it if we got a valid new token\n    state.token = token;\n    await writeTokenToStorage(app, token);\n  }\n  if (shouldCallListeners) {\n    notifyTokenListeners(app, interopTokenResult);\n  }\n  return interopTokenResult;\n}\n/**\r\n * Internal API for limited use tokens. Skips all FAC state and simply calls\r\n * the underlying provider.\r\n */\nasync function getLimitedUseToken$1(appCheck) {\n  const app = appCheck.app;\n  ensureActivated(app);\n  const {\n    provider\n  } = getStateReference(app);\n  if (isDebugMode()) {\n    const debugToken = await getDebugToken();\n    const {\n      token\n    } = await exchangeToken(getExchangeDebugTokenRequest(app, debugToken), appCheck.heartbeatServiceProvider);\n    return {\n      token\n    };\n  } else {\n    // provider is definitely valid since we ensure AppCheck was activated\n    const {\n      token\n    } = await provider.getToken();\n    return {\n      token\n    };\n  }\n}\nfunction addTokenListener(appCheck, type, listener, onError) {\n  const {\n    app\n  } = appCheck;\n  const state = getStateReference(app);\n  const tokenObserver = {\n    next: listener,\n    error: onError,\n    type\n  };\n  state.tokenObservers = [...state.tokenObservers, tokenObserver];\n  // Invoke the listener async immediately if there is a valid token\n  // in memory.\n  if (state.token && isValid(state.token)) {\n    const validToken = state.token;\n    Promise.resolve().then(() => {\n      listener({\n        token: validToken.token\n      });\n      initTokenRefresher(appCheck);\n    }).catch(() => {\n      /* we don't care about exceptions thrown in listeners */\n    });\n  }\n  /**\r\n   * Wait for any cached token promise to resolve before starting the token\r\n   * refresher. The refresher checks to see if there is an existing token\r\n   * in state and calls the exchange endpoint if not. We should first let the\r\n   * IndexedDB check have a chance to populate state if it can.\r\n   *\r\n   * Listener call isn't needed here because cachedTokenPromise will call any\r\n   * listeners that exist when it resolves.\r\n   */\n  // state.cachedTokenPromise is always populated in `activate()`.\n  void state.cachedTokenPromise.then(() => initTokenRefresher(appCheck));\n}\nfunction removeTokenListener(app, listener) {\n  const state = getStateReference(app);\n  const newObservers = state.tokenObservers.filter(tokenObserver => tokenObserver.next !== listener);\n  if (newObservers.length === 0 && state.tokenRefresher && state.tokenRefresher.isRunning()) {\n    state.tokenRefresher.stop();\n  }\n  state.tokenObservers = newObservers;\n}\n/**\r\n * Logic to create and start refresher as needed.\r\n */\nfunction initTokenRefresher(appCheck) {\n  const {\n    app\n  } = appCheck;\n  const state = getStateReference(app);\n  // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n  let refresher = state.tokenRefresher;\n  if (!refresher) {\n    refresher = createTokenRefresher(appCheck);\n    state.tokenRefresher = refresher;\n  }\n  if (!refresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    refresher.start();\n  }\n}\nfunction createTokenRefresher(appCheck) {\n  const {\n    app\n  } = appCheck;\n  return new Refresher(\n  // Keep in mind when this fails for any reason other than the ones\n  // for which we should retry, it will effectively stop the proactive refresh.\n  async () => {\n    const state = getStateReference(app);\n    // If there is no token, we will try to load it from storage and use it\n    // If there is a token, we force refresh it because we know it's going to expire soon\n    let result;\n    if (!state.token) {\n      result = await getToken$2(appCheck);\n    } else {\n      result = await getToken$2(appCheck, true);\n    }\n    /**\r\n     * getToken() always resolves. In case the result has an error field defined, it means\r\n     * the operation failed, and we should retry.\r\n     */\n    if (result.error) {\n      throw result.error;\n    }\n    /**\r\n     * A special `internalError` field reflects that there was an error\r\n     * getting a new token from the exchange endpoint, but there's still a\r\n     * previous token that's valid for now and this should be passed to 2P/3P\r\n     * requests for a token. But we want this callback (`this.operation` in\r\n     * `Refresher`) to throw in order to kick off the Refresher's retry\r\n     * backoff. (Setting `hasSucceeded` to false.)\r\n     */\n    if (result.internalError) {\n      throw result.internalError;\n    }\n  }, () => {\n    return true;\n  }, () => {\n    const state = getStateReference(app);\n    if (state.token) {\n      // issuedAtTime + (50% * total TTL) + 5 minutes\n      let nextRefreshTimeMillis = state.token.issuedAtTimeMillis + (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) * 0.5 + 5 * 60 * 1000;\n      // Do not allow refresh time to be past (expireTime - 5 minutes)\n      const latestAllowableRefresh = state.token.expireTimeMillis - 5 * 60 * 1000;\n      nextRefreshTimeMillis = Math.min(nextRefreshTimeMillis, latestAllowableRefresh);\n      return Math.max(0, nextRefreshTimeMillis - Date.now());\n    } else {\n      return 0;\n    }\n  }, TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT, TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT);\n}\nfunction notifyTokenListeners(app, token) {\n  const observers = getStateReference(app).tokenObservers;\n  for (const observer of observers) {\n    try {\n      if (observer.type === \"EXTERNAL\" /* ListenerType.EXTERNAL */ && token.error != null) {\n        // If this listener was added by a 3P call, send any token error to\n        // the supplied error handler. A 3P observer always has an error\n        // handler.\n        observer.error(token.error);\n      } else {\n        // If the token has no error field, always return the token.\n        // If this is a 2P listener, return the token, whether or not it\n        // has an error field.\n        observer.next(token);\n      }\n    } catch (e) {\n      // Errors in the listener function itself are always ignored.\n    }\n  }\n}\nfunction isValid(token) {\n  return token.expireTimeMillis - Date.now() > 0;\n}\nfunction makeDummyTokenResult(error) {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * AppCheck Service class.\r\n */\nclass AppCheckService {\n  constructor(app, heartbeatServiceProvider) {\n    this.app = app;\n    this.heartbeatServiceProvider = heartbeatServiceProvider;\n  }\n  _delete() {\n    const {\n      tokenObservers\n    } = getStateReference(this.app);\n    for (const tokenObserver of tokenObservers) {\n      removeTokenListener(this.app, tokenObserver.next);\n    }\n    return Promise.resolve();\n  }\n}\nfunction factory(app, heartbeatServiceProvider) {\n  return new AppCheckService(app, heartbeatServiceProvider);\n}\nfunction internalFactory(appCheck) {\n  return {\n    getToken: forceRefresh => getToken$2(appCheck, forceRefresh),\n    getLimitedUseToken: () => getLimitedUseToken$1(appCheck),\n    addTokenListener: listener => addTokenListener(appCheck, \"INTERNAL\" /* ListenerType.INTERNAL */, listener),\n    removeTokenListener: listener => removeTokenListener(appCheck.app, listener)\n  };\n}\nconst name = \"@firebase/app-check\";\nconst version = \"0.8.8\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\nconst RECAPTCHA_ENTERPRISE_URL = 'https://www.google.com/recaptcha/enterprise.js';\nfunction initializeV3(app, siteKey) {\n  const initialized = new Deferred();\n  const state = getStateReference(app);\n  state.reCAPTCHAState = {\n    initialized\n  };\n  const divId = makeDiv(app);\n  const grecaptcha = getRecaptcha(false);\n  if (!grecaptcha) {\n    loadReCAPTCHAV3Script(() => {\n      const grecaptcha = getRecaptcha(false);\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n  return initialized.promise;\n}\nfunction initializeEnterprise(app, siteKey) {\n  const initialized = new Deferred();\n  const state = getStateReference(app);\n  state.reCAPTCHAState = {\n    initialized\n  };\n  const divId = makeDiv(app);\n  const grecaptcha = getRecaptcha(true);\n  if (!grecaptcha) {\n    loadReCAPTCHAEnterpriseScript(() => {\n      const grecaptcha = getRecaptcha(true);\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n  return initialized.promise;\n}\n/**\r\n * Add listener to render the widget and resolve the promise when\r\n * the grecaptcha.ready() event fires.\r\n */\nfunction queueWidgetRender(app, siteKey, grecaptcha, container, initialized) {\n  grecaptcha.ready(() => {\n    // Invisible widgets allow us to set a different siteKey for each widget,\n    // so we use them to support multiple apps\n    renderInvisibleWidget(app, siteKey, grecaptcha, container);\n    initialized.resolve(grecaptcha);\n  });\n}\n/**\r\n * Add invisible div to page.\r\n */\nfunction makeDiv(app) {\n  const divId = `fire_app_check_${app.name}`;\n  const invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n  document.body.appendChild(invisibleDiv);\n  return divId;\n}\nasync function getToken$1(app) {\n  ensureActivated(app);\n  // ensureActivated() guarantees that reCAPTCHAState is set\n  const reCAPTCHAState = getStateReference(app).reCAPTCHAState;\n  const recaptcha = await reCAPTCHAState.initialized.promise;\n  return new Promise((resolve, _reject) => {\n    // Updated after initialization is complete.\n    const reCAPTCHAState = getStateReference(app).reCAPTCHAState;\n    recaptcha.ready(() => {\n      resolve(\n      // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n      recaptcha.execute(reCAPTCHAState.widgetId, {\n        action: 'fire_app_check'\n      }));\n    });\n  });\n}\n/**\r\n *\r\n * @param app\r\n * @param container - Id of a HTML element.\r\n */\nfunction renderInvisibleWidget(app, siteKey, grecaptcha, container) {\n  const widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible',\n    // Success callback - set state\n    callback: () => {\n      getStateReference(app).reCAPTCHAState.succeeded = true;\n    },\n    // Failure callback - set state\n    'error-callback': () => {\n      getStateReference(app).reCAPTCHAState.succeeded = false;\n    }\n  });\n  const state = getStateReference(app);\n  state.reCAPTCHAState = Object.assign(Object.assign({}, state.reCAPTCHAState), {\n    // state.reCAPTCHAState is set in the initialize()\n    widgetId\n  });\n}\nfunction loadReCAPTCHAV3Script(onload) {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\nfunction loadReCAPTCHAEnterpriseScript(onload) {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_ENTERPRISE_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\r\n * for an App Check token.\r\n *\r\n * @public\r\n */\nclass ReCaptchaV3Provider {\n  /**\r\n   * Create a ReCaptchaV3Provider instance.\r\n   * @param siteKey - ReCAPTCHA V3 siteKey.\r\n   */\n  constructor(_siteKey) {\n    this._siteKey = _siteKey;\n    /**\r\n     * Throttle requests on certain error codes to prevent too many retries\r\n     * in a short time.\r\n     */\n    this._throttleData = null;\n  }\n  /**\r\n   * Returns an App Check token.\r\n   * @internal\r\n   */\n  async getToken() {\n    var _a, _b, _c;\n    throwIfThrottled(this._throttleData);\n    // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._heartbeatServiceProvider are available.\n    const attestedClaimsToken = await getToken$1(this._app).catch(_e => {\n      // reCaptcha.execute() throws null which is not very descriptive.\n      throw ERROR_FACTORY.create(\"recaptcha-error\" /* AppCheckError.RECAPTCHA_ERROR */);\n    });\n    // Check if a failure state was set by the recaptcha \"error-callback\".\n    if (!((_a = getStateReference(this._app).reCAPTCHAState) === null || _a === void 0 ? void 0 : _a.succeeded)) {\n      throw ERROR_FACTORY.create(\"recaptcha-error\" /* AppCheckError.RECAPTCHA_ERROR */);\n    }\n    let result;\n    try {\n      result = await exchangeToken(getExchangeRecaptchaV3TokenRequest(this._app, attestedClaimsToken), this._heartbeatServiceProvider);\n    } catch (e) {\n      if ((_b = e.code) === null || _b === void 0 ? void 0 : _b.includes(\"fetch-status-error\" /* AppCheckError.FETCH_STATUS_ERROR */)) {\n        this._throttleData = setBackoff(Number((_c = e.customData) === null || _c === void 0 ? void 0 : _c.httpStatus), this._throttleData);\n        throw ERROR_FACTORY.create(\"throttled\" /* AppCheckError.THROTTLED */, {\n          time: getDurationString(this._throttleData.allowRequestsAfter - Date.now()),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    }\n    // If successful, clear throttle data.\n    this._throttleData = null;\n    return result;\n  }\n  /**\r\n   * @internal\r\n   */\n  initialize(app) {\n    this._app = app;\n    this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n    initializeV3(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n  /**\r\n   * @internal\r\n   */\n  isEqual(otherProvider) {\n    if (otherProvider instanceof ReCaptchaV3Provider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n}\n/**\r\n * App Check provider that can obtain a reCAPTCHA Enterprise token and exchange it\r\n * for an App Check token.\r\n *\r\n * @public\r\n */\nclass ReCaptchaEnterpriseProvider {\n  /**\r\n   * Create a ReCaptchaEnterpriseProvider instance.\r\n   * @param siteKey - reCAPTCHA Enterprise score-based site key.\r\n   */\n  constructor(_siteKey) {\n    this._siteKey = _siteKey;\n    /**\r\n     * Throttle requests on certain error codes to prevent too many retries\r\n     * in a short time.\r\n     */\n    this._throttleData = null;\n  }\n  /**\r\n   * Returns an App Check token.\r\n   * @internal\r\n   */\n  async getToken() {\n    var _a, _b, _c;\n    throwIfThrottled(this._throttleData);\n    // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._heartbeatServiceProvider are available.\n    const attestedClaimsToken = await getToken$1(this._app).catch(_e => {\n      // reCaptcha.execute() throws null which is not very descriptive.\n      throw ERROR_FACTORY.create(\"recaptcha-error\" /* AppCheckError.RECAPTCHA_ERROR */);\n    });\n    // Check if a failure state was set by the recaptcha \"error-callback\".\n    if (!((_a = getStateReference(this._app).reCAPTCHAState) === null || _a === void 0 ? void 0 : _a.succeeded)) {\n      throw ERROR_FACTORY.create(\"recaptcha-error\" /* AppCheckError.RECAPTCHA_ERROR */);\n    }\n    let result;\n    try {\n      result = await exchangeToken(getExchangeRecaptchaEnterpriseTokenRequest(this._app, attestedClaimsToken), this._heartbeatServiceProvider);\n    } catch (e) {\n      if ((_b = e.code) === null || _b === void 0 ? void 0 : _b.includes(\"fetch-status-error\" /* AppCheckError.FETCH_STATUS_ERROR */)) {\n        this._throttleData = setBackoff(Number((_c = e.customData) === null || _c === void 0 ? void 0 : _c.httpStatus), this._throttleData);\n        throw ERROR_FACTORY.create(\"throttled\" /* AppCheckError.THROTTLED */, {\n          time: getDurationString(this._throttleData.allowRequestsAfter - Date.now()),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    }\n    // If successful, clear throttle data.\n    this._throttleData = null;\n    return result;\n  }\n  /**\r\n   * @internal\r\n   */\n  initialize(app) {\n    this._app = app;\n    this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n    initializeEnterprise(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n  /**\r\n   * @internal\r\n   */\n  isEqual(otherProvider) {\n    if (otherProvider instanceof ReCaptchaEnterpriseProvider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n}\n/**\r\n * Custom provider class.\r\n * @public\r\n */\nclass CustomProvider {\n  constructor(_customProviderOptions) {\n    this._customProviderOptions = _customProviderOptions;\n  }\n  /**\r\n   * @internal\r\n   */\n  async getToken() {\n    // custom provider\n    const customToken = await this._customProviderOptions.getToken();\n    // Try to extract IAT from custom token, in case this token is not\n    // being newly issued. JWT timestamps are in seconds since epoch.\n    const issuedAtTimeSeconds = issuedAtTime(customToken.token);\n    // Very basic validation, use current timestamp as IAT if JWT\n    // has no `iat` field or value is out of bounds.\n    const issuedAtTimeMillis = issuedAtTimeSeconds !== null && issuedAtTimeSeconds < Date.now() && issuedAtTimeSeconds > 0 ? issuedAtTimeSeconds * 1000 : Date.now();\n    return Object.assign(Object.assign({}, customToken), {\n      issuedAtTimeMillis\n    });\n  }\n  /**\r\n   * @internal\r\n   */\n  initialize(app) {\n    this._app = app;\n  }\n  /**\r\n   * @internal\r\n   */\n  isEqual(otherProvider) {\n    if (otherProvider instanceof CustomProvider) {\n      return this._customProviderOptions.getToken.toString() === otherProvider._customProviderOptions.getToken.toString();\n    } else {\n      return false;\n    }\n  }\n}\n/**\r\n * Set throttle data to block requests until after a certain time\r\n * depending on the failed request's status code.\r\n * @param httpStatus - Status code of failed request.\r\n * @param throttleData - `ThrottleData` object containing previous throttle\r\n * data state.\r\n * @returns Data about current throttle state and expiration time.\r\n */\nfunction setBackoff(httpStatus, throttleData) {\n  /**\r\n   * Block retries for 1 day for the following error codes:\r\n   *\r\n   * 404: Likely malformed URL.\r\n   *\r\n   * 403:\r\n   * - Attestation failed\r\n   * - Wrong API key\r\n   * - Project deleted\r\n   */\n  if (httpStatus === 404 || httpStatus === 403) {\n    return {\n      backoffCount: 1,\n      allowRequestsAfter: Date.now() + ONE_DAY,\n      httpStatus\n    };\n  } else {\n    /**\r\n     * For all other error codes, the time when it is ok to retry again\r\n     * is based on exponential backoff.\r\n     */\n    const backoffCount = throttleData ? throttleData.backoffCount : 0;\n    const backoffMillis = calculateBackoffMillis(backoffCount, 1000, 2);\n    return {\n      backoffCount: backoffCount + 1,\n      allowRequestsAfter: Date.now() + backoffMillis,\n      httpStatus\n    };\n  }\n}\nfunction throwIfThrottled(throttleData) {\n  if (throttleData) {\n    if (Date.now() - throttleData.allowRequestsAfter <= 0) {\n      // If before, throw.\n      throw ERROR_FACTORY.create(\"throttled\" /* AppCheckError.THROTTLED */, {\n        time: getDurationString(throttleData.allowRequestsAfter - Date.now()),\n        httpStatus: throttleData.httpStatus\n      });\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Activate App Check for the given app. Can be called only once per app.\r\n * @param app - the {@link @firebase/app#FirebaseApp} to activate App Check for\r\n * @param options - App Check initialization options\r\n * @public\r\n */\nfunction initializeAppCheck(app = getApp(), options) {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'app-check');\n  // Ensure initializeDebugMode() is only called once.\n  if (!getDebugState().initialized) {\n    initializeDebugMode();\n  }\n  // Log a message containing the debug token when `initializeAppCheck()`\n  // is called in debug mode.\n  if (isDebugMode()) {\n    // Do not block initialization to get the token for the message.\n    void getDebugToken().then(token =>\n    // Not using logger because I don't think we ever want this accidentally hidden.\n    console.log(`App Check debug token: ${token}. You will need to add it to your app's App Check settings in the Firebase console for it to work.`));\n  }\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialOptions = provider.getOptions();\n    if (initialOptions.isTokenAutoRefreshEnabled === options.isTokenAutoRefreshEnabled && initialOptions.provider.isEqual(options.provider)) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(\"already-initialized\" /* AppCheckError.ALREADY_INITIALIZED */, {\n        appName: app.name\n      });\n    }\n  }\n  const appCheck = provider.initialize({\n    options\n  });\n  _activate(app, options.provider, options.isTokenAutoRefreshEnabled);\n  // If isTokenAutoRefreshEnabled is false, do not send any requests to the\n  // exchange endpoint without an explicit call from the user either directly\n  // or through another Firebase library (storage, functions, etc.)\n  if (getStateReference(app).isTokenAutoRefreshEnabled) {\n    // Adding a listener will start the refresher and fetch a token if needed.\n    // This gets a token ready and prevents a delay when an internal library\n    // requests the token.\n    // Listener function does not need to do anything, its base functionality\n    // of calling getToken() already fetches token and writes it to memory/storage.\n    addTokenListener(appCheck, \"INTERNAL\" /* ListenerType.INTERNAL */, () => {});\n  }\n  return appCheck;\n}\n/**\r\n * Activate App Check\r\n * @param app - Firebase app to activate App Check for.\r\n * @param provider - reCAPTCHA v3 provider or\r\n * custom token provider.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. If undefined, defaults to the\r\n * value of `app.automaticDataCollectionEnabled`, which defaults to\r\n * false and can be set in the app config.\r\n */\nfunction _activate(app, provider, isTokenAutoRefreshEnabled) {\n  // Create an entry in the APP_CHECK_STATES map. Further changes should\n  // directly mutate this object.\n  const state = setInitialState(app, Object.assign({}, DEFAULT_STATE));\n  state.activated = true;\n  state.provider = provider; // Read cached token from storage if it exists and store it in memory.\n  state.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {\n    if (cachedToken && isValid(cachedToken)) {\n      state.token = cachedToken;\n      // notify all listeners with the cached token\n      notifyTokenListeners(app, {\n        token: cachedToken.token\n      });\n    }\n    return cachedToken;\n  });\n  // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n  state.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled === undefined ? app.automaticDataCollectionEnabled : isTokenAutoRefreshEnabled;\n  state.provider.initialize(app);\n}\n/**\r\n * Set whether App Check will automatically refresh tokens as needed.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. This overrides any value set\r\n * during `initializeAppCheck()`.\r\n * @public\r\n */\nfunction setTokenAutoRefreshEnabled(appCheckInstance, isTokenAutoRefreshEnabled) {\n  const app = appCheckInstance.app;\n  const state = getStateReference(app);\n  // This will exist if any product libraries have called\n  // `addTokenListener()`\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n  state.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled;\n}\n/**\r\n * Get the current App Check token. If `forceRefresh` is false, this function first\r\n * checks for a valid token in memory, then local persistence (IndexedDB).\r\n * If not found, or if `forceRefresh` is true, it makes a request to the\r\n * App Check endpoint for a fresh token. That request attaches\r\n * to the most recent in-flight request if one is present.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param forceRefresh - If true, will always try to fetch a fresh token.\r\n * If false, will use a cached token if found in storage.\r\n * @public\r\n */\nasync function getToken(appCheckInstance, forceRefresh) {\n  const result = await getToken$2(appCheckInstance, forceRefresh);\n  if (result.error) {\n    throw result.error;\n  }\n  return {\n    token: result.token\n  };\n}\n/**\r\n * Requests a Firebase App Check token. This method should be used\r\n * only if you need to authorize requests to a non-Firebase backend.\r\n *\r\n * Returns limited-use tokens that are intended for use with your\r\n * non-Firebase backend endpoints that are protected with\r\n * <a href=\"https://firebase.google.com/docs/app-check/custom-resource-backend#replay-protection\">\r\n * Replay Protection</a>. This method\r\n * does not affect the token generation behavior of the\r\n * #getAppCheckToken() method.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @returns The limited use token.\r\n * @public\r\n */\nfunction getLimitedUseToken(appCheckInstance) {\n  return getLimitedUseToken$1(appCheckInstance);\n}\n/**\r\n * Wraps `addTokenListener`/`removeTokenListener` methods in an `Observer`\r\n * pattern for public use.\r\n */\nfunction onTokenChanged(appCheckInstance, onNextOrObserver, onError,\n/**\r\n * NOTE: Although an `onCompletion` callback can be provided, it will\r\n * never be called because the token stream is never-ending.\r\n * It is added only for API consistency with the observer pattern, which\r\n * we follow in JS APIs.\r\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nonCompletion) {\n  let nextFn = () => {};\n  let errorFn = () => {};\n  if (onNextOrObserver.next != null) {\n    nextFn = onNextOrObserver.next.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver;\n  }\n  if (onNextOrObserver.error != null) {\n    errorFn = onNextOrObserver.error.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n  addTokenListener(appCheckInstance, \"EXTERNAL\" /* ListenerType.EXTERNAL */, nextFn, errorFn);\n  return () => removeTokenListener(appCheckInstance.app, nextFn);\n}\n\n/**\r\n * The Firebase App Check Web SDK.\r\n *\r\n * @remarks\r\n * Firebase App Check does not work in a Node.js environment using `ReCaptchaV3Provider` or\r\n * `ReCaptchaEnterpriseProvider`, but can be used in Node.js if you use\r\n * `CustomProvider` and write your own attestation method.\r\n *\r\n * @packageDocumentation\r\n */\nconst APP_CHECK_NAME = 'app-check';\nconst APP_CHECK_NAME_INTERNAL = 'app-check-internal';\nfunction registerAppCheck() {\n  // The public interface\n  _registerComponent(new Component(APP_CHECK_NAME, container => {\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    const heartbeatServiceProvider = container.getProvider('heartbeat');\n    return factory(app, heartbeatServiceProvider);\n  }, \"PUBLIC\" /* ComponentType.PUBLIC */).setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */)\n  /**\r\n   * Initialize app-check-internal after app-check is initialized to make AppCheck available to\r\n   * other Firebase SDKs\r\n   */.setInstanceCreatedCallback((container, _identifier, _appcheckService) => {\n    container.getProvider(APP_CHECK_NAME_INTERNAL).initialize();\n  }));\n  // The internal interface used by other Firebase products\n  _registerComponent(new Component(APP_CHECK_NAME_INTERNAL, container => {\n    const appCheck = container.getProvider('app-check').getImmediate();\n    return internalFactory(appCheck);\n  }, \"PUBLIC\" /* ComponentType.PUBLIC */).setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */));\n  registerVersion(name, version);\n}\nregisterAppCheck();\nexport { CustomProvider, ReCaptchaEnterpriseProvider, ReCaptchaV3Provider, getLimitedUseToken, getToken, initializeAppCheck, onTokenChanged, setTokenAutoRefreshEnabled };\n", "import { ɵgetAllInstancesOf as _getAllInstancesOf, ɵAPP_CHECK_PROVIDER_NAME as _APP_CHECK_PROVIDER_NAME, ɵgetDefaultInstanceOf as _getDefaultInstanceOf, ɵAppCheckInstances as _AppCheckInstances, VERSION, ɵAngularFireSchedulers as _AngularFireSchedulers, ɵzoneWrap as _zoneWrap } from '@angular/fire';\nexport { ɵAppCheckInstances as AppCheckInstances } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport { isPlatformServer } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, Optional, PLATFORM_ID, NgModule, makeEnvironmentProviders, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { getLimitedUseToken as getLimitedUseToken$1, getToken as getToken$1, initializeAppCheck as initializeAppCheck$1, onTokenChanged as onTokenChanged$1, setTokenAutoRefreshEnabled as setTokenAutoRefreshEnabled$1 } from 'firebase/app-check';\nexport * from 'firebase/app-check';\nclass AppCheck {\n  constructor(appCheck) {\n    return appCheck;\n  }\n}\nconst appCheckInstance$ = timer(0, 300).pipe(concatMap(() => from(_getAllInstancesOf(_APP_CHECK_PROVIDER_NAME))), distinct());\nconst PROVIDED_APP_CHECK_INSTANCES = new InjectionToken('angularfire2.app-check-instances');\nfunction defaultAppCheckInstanceFactory(provided, defaultApp) {\n  const defaultAppCheck = _getDefaultInstanceOf(_APP_CHECK_PROVIDER_NAME, provided, defaultApp);\n  return defaultAppCheck && new AppCheck(defaultAppCheck);\n}\nconst LOCALHOSTS = ['localhost', '0.0.0.0', '127.0.0.1'];\nconst isLocalhost = typeof window !== 'undefined' && LOCALHOSTS.includes(window.location.hostname);\nfunction appCheckInstanceFactory(fn) {\n  return (zone, injector, platformId) => {\n    // Node should use admin token provider, browser devmode and localhost should use debug token\n    if (!isPlatformServer(platformId) && (isDevMode() || isLocalhost)) {\n      globalThis.FIREBASE_APPCHECK_DEBUG_TOKEN ??= true;\n    }\n    const appCheck = zone.runOutsideAngular(() => fn(injector));\n    return new AppCheck(appCheck);\n  };\n}\nconst APP_CHECK_INSTANCES_PROVIDER = {\n  provide: _AppCheckInstances,\n  deps: [[new Optional(), PROVIDED_APP_CHECK_INSTANCES]]\n};\nconst DEFAULT_APP_CHECK_INSTANCE_PROVIDER = {\n  provide: AppCheck,\n  useFactory: defaultAppCheckInstanceFactory,\n  deps: [[new Optional(), PROVIDED_APP_CHECK_INSTANCES], FirebaseApp, PLATFORM_ID]\n};\nclass AppCheckModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'app-check');\n  }\n  static ɵfac = function AppCheckModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AppCheckModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AppCheckModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_APP_CHECK_INSTANCE_PROVIDER, APP_CHECK_INSTANCES_PROVIDER]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AppCheckModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_APP_CHECK_INSTANCE_PROVIDER, APP_CHECK_INSTANCES_PROVIDER]\n    }]\n  }], () => [], null);\n})();\nfunction provideAppCheck(fn, ...deps) {\n  registerVersion('angularfire', VERSION.full, 'app-check');\n  return makeEnvironmentProviders([DEFAULT_APP_CHECK_INSTANCE_PROVIDER, APP_CHECK_INSTANCES_PROVIDER, {\n    provide: PROVIDED_APP_CHECK_INSTANCES,\n    useFactory: appCheckInstanceFactory(fn),\n    multi: true,\n    deps: [NgZone, Injector, PLATFORM_ID, _AngularFireSchedulers, FirebaseApps, ...deps]\n  }]);\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst getLimitedUseToken = _zoneWrap(getLimitedUseToken$1, true);\nconst getToken = _zoneWrap(getToken$1, true);\nconst initializeAppCheck = _zoneWrap(initializeAppCheck$1, true);\nconst onTokenChanged = _zoneWrap(onTokenChanged$1, true);\nconst setTokenAutoRefreshEnabled = _zoneWrap(setTokenAutoRefreshEnabled$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AppCheck, AppCheckModule, appCheckInstance$, getLimitedUseToken, getToken, initializeAppCheck, onTokenChanged, provideAppCheck, setTokenAutoRefreshEnabled };\n", "import 'firebase/compat/auth';\nimport { isPlatformServer } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, NgModule } from '@angular/core';\nimport * as i1 from '@angular/fire';\nimport { keepUnstableUntilFirst, VERSION } from '@angular/fire';\nimport * as i2 from '@angular/fire/app-check';\nimport { ɵcacheInstance as _cacheInstance, ɵfirebaseAppFactory as _firebaseAppFactory, ɵlazySDKProxy as _lazySDKProxy, FIREBASE_OPTIONS, FIREBASE_APP_NAME, ɵapplyMixins as _applyMixins } from '@angular/fire/compat';\nimport { Subject, of, Observable, from, merge } from 'rxjs';\nimport { observeOn, switchMap, map, shareReplay, first, switchMapTo, subscribeOn, filter } from 'rxjs/operators';\nimport firebase from 'firebase/compat/app';\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\n// Export a null object with the same keys as firebase/compat/auth, so Proxy can work with proxy-polyfill in Internet Explorer\nconst proxyPolyfillCompat = {\n  name: null,\n  config: null,\n  emulatorConfig: null,\n  app: null,\n  applyActionCode: null,\n  checkActionCode: null,\n  confirmPasswordReset: null,\n  createUserWithEmailAndPassword: null,\n  currentUser: null,\n  fetchSignInMethodsForEmail: null,\n  isSignInWithEmailLink: null,\n  getRedirectResult: null,\n  languageCode: null,\n  settings: null,\n  onAuthStateChanged: null,\n  onIdTokenChanged: null,\n  sendSignInLinkToEmail: null,\n  sendPasswordResetEmail: null,\n  setPersistence: null,\n  signInAndRetrieveDataWithCredential: null,\n  signInAnonymously: null,\n  signInWithCredential: null,\n  signInWithCustomToken: null,\n  signInWithEmailAndPassword: null,\n  signInWithPhoneNumber: null,\n  signInWithEmailLink: null,\n  signInWithPopup: null,\n  signInWithRedirect: null,\n  signOut: null,\n  tenantId: null,\n  updateCurrentUser: null,\n  useDeviceLanguage: null,\n  useEmulator: null,\n  verifyPasswordResetCode: null\n};\nconst USE_EMULATOR = new InjectionToken('angularfire2.auth.use-emulator');\nconst SETTINGS = new InjectionToken('angularfire2.auth.settings');\nconst TENANT_ID = new InjectionToken('angularfire2.auth.tenant-id');\nconst LANGUAGE_CODE = new InjectionToken('angularfire2.auth.langugage-code');\nconst USE_DEVICE_LANGUAGE = new InjectionToken('angularfire2.auth.use-device-language');\nconst PERSISTENCE = new InjectionToken('angularfire.auth.persistence');\nconst ɵauthFactory = (app, zone, useEmulator, tenantId, languageCode, useDeviceLanguage, settings, persistence) => _cacheInstance(`${app.name}.auth`, 'AngularFireAuth', app.name, () => {\n  const auth = zone.runOutsideAngular(() => app.auth());\n  if (useEmulator) {\n    auth.useEmulator(...useEmulator);\n  }\n  if (tenantId) {\n    auth.tenantId = tenantId;\n  }\n  auth.languageCode = languageCode;\n  if (useDeviceLanguage) {\n    auth.useDeviceLanguage();\n  }\n  if (settings) {\n    for (const [k, v] of Object.entries(settings)) {\n      auth.settings[k] = v;\n    }\n  }\n  if (persistence) {\n    auth.setPersistence(persistence);\n  }\n  return auth;\n}, [useEmulator, tenantId, languageCode, useDeviceLanguage, settings, persistence]);\nclass AngularFireAuth {\n  /**\n   * Observable of authentication state; as of Firebase 4.0 this is only triggered via sign-in/out\n   */\n  authState;\n  /**\n   * Observable of the currently signed-in user's JWT token used to identify the user to a Firebase service (or null).\n   */\n  idToken;\n  /**\n   * Observable of the currently signed-in user (or null).\n   */\n  user;\n  /**\n   * Observable of the currently signed-in user's IdTokenResult object which contains the ID token JWT string and other\n   * helper properties for getting different data associated with the token as well as all the decoded payload claims\n   * (or null).\n   */\n  idTokenResult;\n  /**\n   * Observable of the currently signed-in user's credential, or null\n   */\n  credential;\n  constructor(options, name,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  platformId, zone, schedulers, useEmulator,\n  // can't use the tuple here\n  settings,\n  // can't use firebase.auth.AuthSettings here\n  tenantId, languageCode, useDeviceLanguage, persistence, _appCheckInstances) {\n    const logins = new Subject();\n    const auth = of(undefined).pipe(observeOn(schedulers.outsideAngular), switchMap(() => zone.runOutsideAngular(() => import('firebase/compat/auth'))), map(() => _firebaseAppFactory(options, zone, name)), map(app => ɵauthFactory(app, zone, useEmulator, tenantId, languageCode, useDeviceLanguage, settings, persistence)), shareReplay({\n      bufferSize: 1,\n      refCount: false\n    }));\n    if (isPlatformServer(platformId)) {\n      this.authState = this.user = this.idToken = this.idTokenResult = this.credential = of(null);\n    } else {\n      // HACK, as we're exporting auth.Auth, rather than auth, developers importing firebase.auth\n      //       (e.g, `import { auth } from 'firebase/compat/app'`) are getting an undefined auth object unexpectedly\n      //       as we're completely lazy. Let's eagerly load the Auth SDK here.\n      //       There could potentially be race conditions still... but this greatly decreases the odds while\n      //       we reevaluate the API.\n      auth.pipe(first()).subscribe();\n      const redirectResult = auth.pipe(switchMap(auth => auth.getRedirectResult().then(it => it, () => null)), keepUnstableUntilFirst, shareReplay({\n        bufferSize: 1,\n        refCount: false\n      }));\n      const authStateChanged = auth.pipe(switchMap(auth => new Observable(sub => ({\n        unsubscribe: zone.runOutsideAngular(() => auth.onAuthStateChanged(next => sub.next(next), err => sub.error(err), () => sub.complete()))\n      }))));\n      const idTokenChanged = auth.pipe(switchMap(auth => new Observable(sub => ({\n        unsubscribe: zone.runOutsideAngular(() => auth.onIdTokenChanged(next => sub.next(next), err => sub.error(err), () => sub.complete()))\n      }))));\n      this.authState = redirectResult.pipe(switchMapTo(authStateChanged), subscribeOn(schedulers.outsideAngular), observeOn(schedulers.insideAngular));\n      this.user = redirectResult.pipe(switchMapTo(idTokenChanged), subscribeOn(schedulers.outsideAngular), observeOn(schedulers.insideAngular));\n      this.idToken = this.user.pipe(switchMap(user => user ? from(user.getIdToken()) : of(null)));\n      this.idTokenResult = this.user.pipe(switchMap(user => user ? from(user.getIdTokenResult()) : of(null)));\n      this.credential = merge(redirectResult, logins,\n      // pipe in null authState to make credential zipable, just a weird devexp if\n      // authState and user go null to still have a credential\n      this.authState.pipe(filter(it => !it))).pipe(\n      // handle the { user: { } } when a user is already logged in, rather have null\n      // TODO handle the type corcersion better\n      map(credential => credential?.user ? credential : null), subscribeOn(schedulers.outsideAngular), observeOn(schedulers.insideAngular));\n    }\n    return _lazySDKProxy(this, auth, zone, {\n      spy: {\n        apply: (name, _, val) => {\n          // If they call a signIn or createUser function listen into the promise\n          // this will give us the user credential, push onto the logins Subject\n          // to be consumed in .credential\n          if (name.startsWith('signIn') || name.startsWith('createUser')) {\n            // TODO fix the types, the trouble is UserCredential has everything optional\n            val.then(user => logins.next(user));\n          }\n        }\n      }\n    });\n  }\n  static ɵfac = function AngularFireAuth_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AngularFireAuth)(i0.ɵɵinject(FIREBASE_OPTIONS), i0.ɵɵinject(FIREBASE_APP_NAME, 8), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.ɵAngularFireSchedulers), i0.ɵɵinject(USE_EMULATOR, 8), i0.ɵɵinject(SETTINGS, 8), i0.ɵɵinject(TENANT_ID, 8), i0.ɵɵinject(LANGUAGE_CODE, 8), i0.ɵɵinject(USE_DEVICE_LANGUAGE, 8), i0.ɵɵinject(PERSISTENCE, 8), i0.ɵɵinject(i2.AppCheckInstances, 8));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AngularFireAuth,\n    factory: AngularFireAuth.ɵfac,\n    providedIn: 'any'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFireAuth, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'any'\n    }]\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [FIREBASE_OPTIONS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [FIREBASE_APP_NAME]\n    }]\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: i0.NgZone\n  }, {\n    type: i1.ɵAngularFireSchedulers\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [USE_EMULATOR]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [SETTINGS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [TENANT_ID]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [LANGUAGE_CODE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [USE_DEVICE_LANGUAGE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [PERSISTENCE]\n    }]\n  }, {\n    type: i2.AppCheckInstances,\n    decorators: [{\n      type: Optional\n    }]\n  }], null);\n})();\n_applyMixins(AngularFireAuth, [proxyPolyfillCompat]);\nclass AngularFireAuthModule {\n  constructor() {\n    firebase.registerVersion('angularfire', VERSION.full, 'auth-compat');\n  }\n  static ɵfac = function AngularFireAuthModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AngularFireAuthModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AngularFireAuthModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [AngularFireAuth]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFireAuthModule, [{\n    type: NgModule,\n    args: [{\n      providers: [AngularFireAuth]\n    }]\n  }], () => [], null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AngularFireAuth, AngularFireAuthModule, LANGUAGE_CODE, PERSISTENCE, SETTINGS, TENANT_ID, USE_DEVICE_LANGUAGE, USE_EMULATOR, ɵauthFactory };\n", "import firebase from '@firebase/app-compat';\nimport { ComponentContainer, Provider, Component } from '@firebase/component';\nimport { _validatePathString, onChildMoved, onChildChanged, onChildRemoved, onChildAdded, onValue, off, get, query, limitToFirst, limitToLast, orderByChild, orderByKey, orderByPriority, orderByValue, startAt, startAfter, endAt, endBefore, equalTo, _ReferenceImpl, _QueryImpl, _QueryParams, child, set, _validateWritablePath, update, setWithPriority, remove, runTransaction, setPriority, push, OnDisconnect as OnDisconnect$1, forceWebSockets, forceLongPolling, connectDatabaseEmulator, refFromURL, ref, goOffline, goOnline, serverTimestamp, increment, _setSDKVersion, _repoManagerDatabaseFromApp, enableLogging } from '@firebase/database';\nimport { errorPrefix, validateArgCount, validateCallback, validateContextObject, Deferred } from '@firebase/util';\nimport { Logger } from '@firebase/logger';\nconst name = \"@firebase/database-compat\";\nconst version = \"1.0.8\";\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst logClient = new Logger('@firebase/database-compat');\nconst warn = function (msg) {\n  const message = 'FIREBASE WARNING: ' + msg;\n  logClient.warn(message);\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst validateBoolean = function (fnName, argumentName, bool, optional) {\n  if (optional && bool === undefined) {\n    return;\n  }\n  if (typeof bool !== 'boolean') {\n    throw new Error(errorPrefix(fnName, argumentName) + 'must be a boolean.');\n  }\n};\nconst validateEventType = function (fnName, eventType, optional) {\n  if (optional && eventType === undefined) {\n    return;\n  }\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n    default:\n      throw new Error(errorPrefix(fnName, 'eventType') + 'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' + '\"child_changed\", or \"child_moved\".');\n  }\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass OnDisconnect {\n  constructor(_delegate) {\n    this._delegate = _delegate;\n  }\n  cancel(onComplete) {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 'onComplete', onComplete, true);\n    const result = this._delegate.cancel();\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  remove(onComplete) {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.remove', 'onComplete', onComplete, true);\n    const result = this._delegate.remove();\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  set(value, onComplete) {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateCallback('OnDisconnect.set', 'onComplete', onComplete, true);\n    const result = this._delegate.set(value);\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  setWithPriority(value, priority, onComplete) {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateCallback('OnDisconnect.setWithPriority', 'onComplete', onComplete, true);\n    const result = this._delegate.setWithPriority(value, priority);\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  update(objectToMerge, onComplete) {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' + 'existing data, or an Object with integer keys if you really do want to only update some of the children.');\n    }\n    validateCallback('OnDisconnect.update', 'onComplete', onComplete, true);\n    const result = this._delegate.update(objectToMerge);\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass TransactionResult {\n  /**\r\n   * A type for the resolve value of Firebase.transaction.\r\n   */\n  constructor(committed, snapshot) {\n    this.committed = committed;\n    this.snapshot = snapshot;\n  }\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON() {\n    validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return {\n      committed: this.committed,\n      snapshot: this.snapshot.toJSON()\n    };\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\nclass DataSnapshot {\n  constructor(_database, _delegate) {\n    this._database = _database;\n    this._delegate = _delegate;\n  }\n  /**\r\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n   * empty.\r\n   *\r\n   * @returns JSON representation of the DataSnapshot contents, or null if empty.\r\n   */\n  val() {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this._delegate.val();\n  }\n  /**\r\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n   * the entire node contents.\r\n   * @returns JSON representation of the DataSnapshot contents, or null if empty.\r\n   */\n  exportVal() {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this._delegate.exportVal();\n  }\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON() {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this._delegate.toJSON();\n  }\n  /**\r\n   * Returns whether the snapshot contains a non-null value.\r\n   *\r\n   * @returns Whether the snapshot contains a non-null value, or is empty.\r\n   */\n  exists() {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return this._delegate.exists();\n  }\n  /**\r\n   * Returns a DataSnapshot of the specified child node's contents.\r\n   *\r\n   * @param path - Path to a child.\r\n   * @returns DataSnapshot for child node.\r\n   */\n  child(path) {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n    // Ensure the childPath is a string (can be a number)\n    path = String(path);\n    _validatePathString('DataSnapshot.child', 'path', path, false);\n    return new DataSnapshot(this._database, this._delegate.child(path));\n  }\n  /**\r\n   * Returns whether the snapshot contains a child at the specified path.\r\n   *\r\n   * @param path - Path to a child.\r\n   * @returns Whether the child exists.\r\n   */\n  hasChild(path) {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    _validatePathString('DataSnapshot.hasChild', 'path', path, false);\n    return this._delegate.hasChild(path);\n  }\n  /**\r\n   * Returns the priority of the object, or null if no priority was set.\r\n   *\r\n   * @returns The priority.\r\n   */\n  getPriority() {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n    return this._delegate.priority;\n  }\n  /**\r\n   * Iterates through child nodes and calls the specified action for each one.\r\n   *\r\n   * @param action - Callback function to be called\r\n   * for each child.\r\n   * @returns True if forEach was canceled by action returning true for\r\n   * one of the child nodes.\r\n   */\n  forEach(action) {\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 'action', action, false);\n    return this._delegate.forEach(expDataSnapshot => action(new DataSnapshot(this._database, expDataSnapshot)));\n  }\n  /**\r\n   * Returns whether this DataSnapshot has children.\r\n   * @returns True if the DataSnapshot contains 1 or more child nodes.\r\n   */\n  hasChildren() {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n    return this._delegate.hasChildren();\n  }\n  get key() {\n    return this._delegate.key;\n  }\n  /**\r\n   * Returns the number of children for this DataSnapshot.\r\n   * @returns The number of children that this DataSnapshot contains.\r\n   */\n  numChildren() {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n    return this._delegate.size;\n  }\n  /**\r\n   * @returns The Firebase reference for the location this snapshot's data came\r\n   * from.\r\n   */\n  getRef() {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n    return new Reference(this._database, this._delegate.ref);\n  }\n  get ref() {\n    return this.getRef();\n  }\n}\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\nclass Query {\n  constructor(database, _delegate) {\n    this.database = database;\n    this._delegate = _delegate;\n  }\n  on(eventType, callback, cancelCallbackOrContext, context) {\n    var _a;\n    validateArgCount('Query.on', 2, 4, arguments.length);\n    validateCallback('Query.on', 'callback', callback, false);\n    const ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\n    const valueCallback = (expSnapshot, previousChildName) => {\n      callback.call(ret.context, new DataSnapshot(this.database, expSnapshot), previousChildName);\n    };\n    valueCallback.userCallback = callback;\n    valueCallback.context = ret.context;\n    const cancelCallback = (_a = ret.cancel) === null || _a === void 0 ? void 0 : _a.bind(ret.context);\n    switch (eventType) {\n      case 'value':\n        onValue(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_added':\n        onChildAdded(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_removed':\n        onChildRemoved(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_changed':\n        onChildChanged(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_moved':\n        onChildMoved(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      default:\n        throw new Error(errorPrefix('Query.on', 'eventType') + 'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' + '\"child_changed\", or \"child_moved\".');\n    }\n  }\n  off(eventType, callback, context) {\n    validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', eventType, true);\n    validateCallback('Query.off', 'callback', callback, true);\n    validateContextObject('Query.off', 'context', context, true);\n    if (callback) {\n      const valueCallback = () => {};\n      valueCallback.userCallback = callback;\n      valueCallback.context = context;\n      off(this._delegate, eventType, valueCallback);\n    } else {\n      off(this._delegate, eventType);\n    }\n  }\n  /**\r\n   * Get the server-value for this query, or return a cached value if not connected.\r\n   */\n  get() {\n    return get(this._delegate).then(expSnapshot => {\n      return new DataSnapshot(this.database, expSnapshot);\n    });\n  }\n  /**\r\n   * Attaches a listener, waits for the first event, and then removes the listener\r\n   */\n  once(eventType, callback, failureCallbackOrContext, context) {\n    validateArgCount('Query.once', 1, 4, arguments.length);\n    validateCallback('Query.once', 'callback', callback, true);\n    const ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context);\n    const deferred = new Deferred();\n    const valueCallback = (expSnapshot, previousChildName) => {\n      const result = new DataSnapshot(this.database, expSnapshot);\n      if (callback) {\n        callback.call(ret.context, result, previousChildName);\n      }\n      deferred.resolve(result);\n    };\n    valueCallback.userCallback = callback;\n    valueCallback.context = ret.context;\n    const cancelCallback = error => {\n      if (ret.cancel) {\n        ret.cancel.call(ret.context, error);\n      }\n      deferred.reject(error);\n    };\n    switch (eventType) {\n      case 'value':\n        onValue(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_added':\n        onChildAdded(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_removed':\n        onChildRemoved(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_changed':\n        onChildChanged(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_moved':\n        onChildMoved(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      default:\n        throw new Error(errorPrefix('Query.once', 'eventType') + 'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' + '\"child_changed\", or \"child_moved\".');\n    }\n    return deferred.promise;\n  }\n  /**\r\n   * Set a limit and anchor it to the start of the window.\r\n   */\n  limitToFirst(limit) {\n    validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, limitToFirst(limit)));\n  }\n  /**\r\n   * Set a limit and anchor it to the end of the window.\r\n   */\n  limitToLast(limit) {\n    validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, limitToLast(limit)));\n  }\n  /**\r\n   * Given a child path, return a new query ordered by the specified grandchild path.\r\n   */\n  orderByChild(path) {\n    validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByChild(path)));\n  }\n  /**\r\n   * Return a new query ordered by the KeyIndex\r\n   */\n  orderByKey() {\n    validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByKey()));\n  }\n  /**\r\n   * Return a new query ordered by the PriorityIndex\r\n   */\n  orderByPriority() {\n    validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByPriority()));\n  }\n  /**\r\n   * Return a new query ordered by the ValueIndex\r\n   */\n  orderByValue() {\n    validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByValue()));\n  }\n  startAt(value = null, name) {\n    validateArgCount('Query.startAt', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, startAt(value, name)));\n  }\n  startAfter(value = null, name) {\n    validateArgCount('Query.startAfter', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, startAfter(value, name)));\n  }\n  endAt(value = null, name) {\n    validateArgCount('Query.endAt', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, endAt(value, name)));\n  }\n  endBefore(value = null, name) {\n    validateArgCount('Query.endBefore', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, endBefore(value, name)));\n  }\n  /**\r\n   * Load the selection of children with exactly the specified value, and, optionally,\r\n   * the specified name.\r\n   */\n  equalTo(value, name) {\n    validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, equalTo(value, name)));\n  }\n  /**\r\n   * @returns URL for this location.\r\n   */\n  toString() {\n    validateArgCount('Query.toString', 0, 0, arguments.length);\n    return this._delegate.toString();\n  }\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n  toJSON() {\n    // An optional spacer argument is unnecessary for a string.\n    validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this._delegate.toJSON();\n  }\n  /**\r\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n   */\n  isEqual(other) {\n    validateArgCount('Query.isEqual', 1, 1, arguments.length);\n    if (!(other instanceof Query)) {\n      const error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n    return this._delegate.isEqual(other._delegate);\n  }\n  /**\r\n   * Helper used by .on and .once to extract the context and or cancel arguments.\r\n   * @param fnName - The function name (on or once)\r\n   *\r\n   */\n  static getCancelAndContextArgs_(fnName, cancelOrContext, context) {\n    const ret = {\n      cancel: undefined,\n      context: undefined\n    };\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext;\n      validateCallback(fnName, 'cancel', ret.cancel, true);\n      ret.context = context;\n      validateContextObject(fnName, 'context', ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext;\n      } else {\n        throw new Error(errorPrefix(fnName, 'cancelOrContext') + ' must either be a cancel callback or a context object.');\n      }\n    }\n    return ret;\n  }\n  get ref() {\n    return new Reference(this.database, new _ReferenceImpl(this._delegate._repo, this._delegate._path));\n  }\n}\nclass Reference extends Query {\n  /**\r\n   * Call options:\r\n   *   new Reference(Repo, Path) or\r\n   *   new Reference(url: string, string|RepoManager)\r\n   *\r\n   * Externally - this is the firebase.database.Reference type.\r\n   */\n  constructor(database, _delegate) {\n    super(database, new _QueryImpl(_delegate._repo, _delegate._path, new _QueryParams(), false));\n    this.database = database;\n    this._delegate = _delegate;\n  }\n  /** @returns {?string} */\n  getKey() {\n    validateArgCount('Reference.key', 0, 0, arguments.length);\n    return this._delegate.key;\n  }\n  child(pathString) {\n    validateArgCount('Reference.child', 1, 1, arguments.length);\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    }\n    return new Reference(this.database, child(this._delegate, pathString));\n  }\n  /** @returns {?Reference} */\n  getParent() {\n    validateArgCount('Reference.parent', 0, 0, arguments.length);\n    const parent = this._delegate.parent;\n    return parent ? new Reference(this.database, parent) : null;\n  }\n  /** @returns {!Reference} */\n  getRoot() {\n    validateArgCount('Reference.root', 0, 0, arguments.length);\n    return new Reference(this.database, this._delegate.root);\n  }\n  set(newVal, onComplete) {\n    validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateCallback('Reference.set', 'onComplete', onComplete, true);\n    const result = set(this._delegate, newVal);\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  update(values, onComplete) {\n    validateArgCount('Reference.update', 1, 2, arguments.length);\n    if (Array.isArray(values)) {\n      const newObjectToMerge = {};\n      for (let i = 0; i < values.length; ++i) {\n        newObjectToMerge['' + i] = values[i];\n      }\n      values = newObjectToMerge;\n      warn('Passing an Array to Firebase.update() is deprecated. ' + 'Use set() if you want to overwrite the existing data, or ' + 'an Object with integer keys if you really do want to ' + 'only update some of the children.');\n    }\n    _validateWritablePath('Reference.update', this._delegate._path);\n    validateCallback('Reference.update', 'onComplete', onComplete, true);\n    const result = update(this._delegate, values);\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  setWithPriority(newVal, newPriority, onComplete) {\n    validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateCallback('Reference.setWithPriority', 'onComplete', onComplete, true);\n    const result = setWithPriority(this._delegate, newVal, newPriority);\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  remove(onComplete) {\n    validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateCallback('Reference.remove', 'onComplete', onComplete, true);\n    const result = remove(this._delegate);\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  transaction(transactionUpdate, onComplete, applyLocally) {\n    validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateCallback('Reference.transaction', 'transactionUpdate', transactionUpdate, false);\n    validateCallback('Reference.transaction', 'onComplete', onComplete, true);\n    validateBoolean('Reference.transaction', 'applyLocally', applyLocally, true);\n    const result = runTransaction(this._delegate, transactionUpdate, {\n      applyLocally\n    }).then(transactionResult => new TransactionResult(transactionResult.committed, new DataSnapshot(this.database, transactionResult.snapshot)));\n    if (onComplete) {\n      result.then(transactionResult => onComplete(null, transactionResult.committed, transactionResult.snapshot), error => onComplete(error, false, null));\n    }\n    return result;\n  }\n  setPriority(priority, onComplete) {\n    validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateCallback('Reference.setPriority', 'onComplete', onComplete, true);\n    const result = setPriority(this._delegate, priority);\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  push(value, onComplete) {\n    validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateCallback('Reference.push', 'onComplete', onComplete, true);\n    const expPromise = push(this._delegate, value);\n    const promise = expPromise.then(expRef => new Reference(this.database, expRef));\n    if (onComplete) {\n      promise.then(() => onComplete(null), error => onComplete(error));\n    }\n    const result = new Reference(this.database, expPromise);\n    result.then = promise.then.bind(promise);\n    result.catch = promise.catch.bind(promise, undefined);\n    return result;\n  }\n  onDisconnect() {\n    _validateWritablePath('Reference.onDisconnect', this._delegate._path);\n    return new OnDisconnect(new OnDisconnect$1(this._delegate._repo, this._delegate._path));\n  }\n  get key() {\n    return this.getKey();\n  }\n  get parent() {\n    return this.getParent();\n  }\n  get root() {\n    return this.getRoot();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Class representing a firebase database.\r\n */\nclass Database {\n  /**\r\n   * The constructor should not be called by users of our public API.\r\n   */\n  constructor(_delegate, app) {\n    this._delegate = _delegate;\n    this.app = app;\n    this.INTERNAL = {\n      delete: () => this._delegate._delete(),\n      forceWebSockets,\n      forceLongPolling\n    };\n  }\n  /**\r\n   * Modify this instance to communicate with the Realtime Database emulator.\r\n   *\r\n   * <p>Note: This method must be called before performing any other operation.\r\n   *\r\n   * @param host - the emulator host (ex: localhost)\r\n   * @param port - the emulator port (ex: 8080)\r\n   * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n   */\n  useEmulator(host, port, options = {}) {\n    connectDatabaseEmulator(this._delegate, host, port, options);\n  }\n  ref(path) {\n    validateArgCount('database.ref', 0, 1, arguments.length);\n    if (path instanceof Reference) {\n      const childRef = refFromURL(this._delegate, path.toString());\n      return new Reference(this, childRef);\n    } else {\n      const childRef = ref(this._delegate, path);\n      return new Reference(this, childRef);\n    }\n  }\n  /**\r\n   * Returns a reference to the root or the path specified in url.\r\n   * We throw a exception if the url is not in the same domain as the\r\n   * current repo.\r\n   * @returns Firebase reference.\r\n   */\n  refFromURL(url) {\n    const apiName = 'database.refFromURL';\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const childRef = refFromURL(this._delegate, url);\n    return new Reference(this, childRef);\n  }\n  // Make individual repo go offline.\n  goOffline() {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    return goOffline(this._delegate);\n  }\n  goOnline() {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    return goOnline(this._delegate);\n  }\n}\nDatabase.ServerValue = {\n  TIMESTAMP: serverTimestamp(),\n  increment: delta => increment(delta)\n};\n\n/**\r\n * Used by console to create a database based on the app,\r\n * passed database URL and a custom auth implementation.\r\n *\r\n * @param app - A valid FirebaseApp-like object\r\n * @param url - A valid Firebase databaseURL\r\n * @param version - custom version e.g. firebase-admin version\r\n * @param customAuthImpl - custom auth implementation\r\n */\nfunction initStandalone({\n  app,\n  url,\n  version,\n  customAuthImpl,\n  customAppCheckImpl,\n  namespace,\n  nodeAdmin = false\n}) {\n  _setSDKVersion(version);\n  const container = new ComponentContainer('database-standalone');\n  /**\r\n   * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\r\n   * any actual function.\r\n   */\n  const authProvider = new Provider('auth-internal', container);\n  authProvider.setComponent(new Component('auth-internal', () => customAuthImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\n  let appCheckProvider = undefined;\n  if (customAppCheckImpl) {\n    appCheckProvider = new Provider('app-check-internal', container);\n    appCheckProvider.setComponent(new Component('app-check-internal', () => customAppCheckImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\n  }\n  return {\n    instance: new Database(_repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin), app),\n    namespace\n  };\n}\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  initStandalone: initStandalone\n});\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst ServerValue = Database.ServerValue;\nfunction registerDatabase(instance) {\n  // Register the Database Service with the 'firebase' namespace.\n  instance.INTERNAL.registerComponent(new Component('database-compat', (container, {\n    instanceIdentifier: url\n  }) => {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app-compat').getImmediate();\n    const databaseExp = container.getProvider('database').getImmediate({\n      identifier: url\n    });\n    return new Database(databaseExp, app);\n  }, \"PUBLIC\" /* ComponentType.PUBLIC */).setServiceProps(\n  // firebase.database namespace properties\n  {\n    Reference,\n    Query,\n    Database,\n    DataSnapshot,\n    enableLogging,\n    INTERNAL,\n    ServerValue\n  }).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n}\nregisterDatabase(firebase);\nexport { registerDatabase };\n", "import * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, NgModule } from '@angular/core';\nimport * as i1 from '@angular/fire';\nimport { keepUnstableUntilFirst, VERSION } from '@angular/fire';\nimport * as i3 from '@angular/fire/app-check';\nimport { ɵfirebaseAppFactory as _firebaseAppFactory, ɵcacheInstance as _cacheInstance, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire/compat';\nimport * as i2 from '@angular/fire/compat/auth';\nimport { ɵauthFactory as _authFactory, USE_EMULATOR as USE_EMULATOR$1, SETTINGS, TENANT_ID, LANGUAGE_CODE, USE_DEVICE_LANGUAGE, PERSISTENCE } from '@angular/fire/compat/auth';\nimport { map, share, scan, withLatestFrom, skipWhile, switchMap, distinctUntilChanged } from 'rxjs/operators';\nimport { Observable, asyncScheduler, merge, of } from 'rxjs';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/database';\nimport firebase from 'firebase/compat/app';\n\n/**\n * Create an observable from a Database Reference or Database Query.\n * @param ref Database Reference\n * @param event Listen event type ('value', 'added', 'changed', 'removed', 'moved')\n * @param listenType 'on' or 'once'\n * @param scheduler - Rxjs scheduler\n */\nfunction fromRef(ref, event, listenType = 'on', scheduler = asyncScheduler) {\n  return new Observable(subscriber => {\n    let fn = null;\n    fn = ref[listenType](event, (snapshot, prevKey) => {\n      scheduler.schedule(() => {\n        subscriber.next({\n          snapshot,\n          prevKey\n        });\n      });\n      if (listenType === 'once') {\n        scheduler.schedule(() => subscriber.complete());\n      }\n    }, err => {\n      scheduler.schedule(() => subscriber.error(err));\n    });\n    if (listenType === 'on') {\n      return {\n        unsubscribe() {\n          if (fn != null) {\n            ref.off(event, fn);\n          }\n        }\n      };\n    } else {\n      return {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        unsubscribe() {}\n      };\n    }\n  }).pipe(map(payload => {\n    const {\n      snapshot,\n      prevKey\n    } = payload;\n    let key = null;\n    if (snapshot.exists()) {\n      key = snapshot.key;\n    }\n    return {\n      type: event,\n      payload: snapshot,\n      prevKey,\n      key\n    };\n  }), share());\n}\nfunction isString(value) {\n  return typeof value === 'string';\n}\nfunction isFirebaseDataSnapshot(value) {\n  return typeof value.exportVal === 'function';\n}\nfunction isNil(obj) {\n  return obj === undefined || obj === null;\n}\nfunction isFirebaseRef(value) {\n  return typeof value.set === 'function';\n}\n/**\n * Returns a database reference given a Firebase App and an\n * absolute or relative path.\n * @param database - Firebase Database\n * @param pathRef - Database path, relative or absolute\n */\nfunction getRef(database, pathRef) {\n  // if a db ref was passed in, just return it\n  return isFirebaseRef(pathRef) ? pathRef : database.ref(pathRef);\n}\nfunction checkOperationCases(item, cases) {\n  if (isString(item)) {\n    return cases.stringCase();\n  } else if (isFirebaseRef(item)) {\n    return cases.firebaseCase();\n  } else if (isFirebaseDataSnapshot(item)) {\n    return cases.snapshotCase();\n  }\n  throw new Error(`Expects a string, snapshot, or reference. Got: ${typeof item}`);\n}\nfunction validateEventsArray(events) {\n  if (isNil(events) || events.length === 0) {\n    events = ['child_added', 'child_removed', 'child_changed', 'child_moved'];\n  }\n  return events;\n}\nfunction stateChanges(query, events, scheduler) {\n  events = validateEventsArray(events);\n  const childEvent$ = events.map(event => fromRef(query, event, 'on', scheduler));\n  return merge(...childEvent$);\n}\nfunction auditTrail(query, events, scheduler) {\n  const auditTrail$ = stateChanges(query, events).pipe(scan((current, action) => [...current, action], []));\n  return waitForLoaded(query, auditTrail$, scheduler);\n}\nfunction loadedData(query, scheduler) {\n  // Create an observable of loaded values to retrieve the\n  // known dataset. This will allow us to know what key to\n  // emit the \"whole\" array at when listening for child events.\n  return fromRef(query, 'value', 'on', scheduler).pipe(map(data => {\n    // Store the last key in the data set\n    let lastKeyToLoad;\n    // Loop through loaded dataset to find the last key\n    data.payload.forEach(child => {\n      lastKeyToLoad = child.key;\n      return false;\n    });\n    // return data set and the current last key loaded\n    return {\n      data,\n      lastKeyToLoad\n    };\n  }));\n}\nfunction waitForLoaded(query, action$, scheduler) {\n  const loaded$ = loadedData(query, scheduler);\n  return loaded$.pipe(withLatestFrom(action$),\n  // Get the latest values from the \"loaded\" and \"child\" datasets\n  // We can use both datasets to form an array of the latest values.\n  map(([loaded, actions]) => {\n    // Store the last key in the data set\n    const lastKeyToLoad = loaded.lastKeyToLoad;\n    // Store all child keys loaded at this point\n    const loadedKeys = actions.map(snap => snap.key);\n    return {\n      actions,\n      lastKeyToLoad,\n      loadedKeys\n    };\n  }),\n  // This is the magical part, only emit when the last load key\n  // in the dataset has been loaded by a child event. At this point\n  // we can assume the dataset is \"whole\".\n  skipWhile(meta => meta.loadedKeys.indexOf(meta.lastKeyToLoad) === -1),\n  // Pluck off the meta data because the user only cares\n  // to iterate through the snapshots\n  map(meta => meta.actions));\n}\nfunction createDataOperationMethod(ref, operation) {\n  return function dataOperation(item, value) {\n    return checkOperationCases(item, {\n      stringCase: () => ref.child(item)[operation](value),\n      firebaseCase: () => item[operation](value),\n      snapshotCase: () => item.ref[operation](value)\n    });\n  };\n}\n\n// TODO(davideast): Find out why TS thinks this returns firebase.Primise\n// instead of Promise.\nfunction createRemoveMethod(ref) {\n  return function remove(item) {\n    if (!item) {\n      return ref.remove();\n    }\n    return checkOperationCases(item, {\n      stringCase: () => ref.child(item).remove(),\n      firebaseCase: () => item.remove(),\n      snapshotCase: () => item.ref.remove()\n    });\n  };\n}\nfunction listChanges(ref, events, scheduler) {\n  return fromRef(ref, 'value', 'once', scheduler).pipe(switchMap(snapshotAction => {\n    const childEvent$ = [of(snapshotAction)];\n    events.forEach(event => childEvent$.push(fromRef(ref, event, 'on', scheduler)));\n    return merge(...childEvent$).pipe(scan(buildView, []));\n  }), distinctUntilChanged());\n}\nfunction positionFor(changes, key) {\n  const len = changes.length;\n  for (let i = 0; i < len; i++) {\n    if (changes[i].payload.key === key) {\n      return i;\n    }\n  }\n  return -1;\n}\nfunction positionAfter(changes, prevKey) {\n  if (isNil(prevKey)) {\n    return 0;\n  } else {\n    const i = positionFor(changes, prevKey);\n    if (i === -1) {\n      return changes.length;\n    } else {\n      return i + 1;\n    }\n  }\n}\nfunction buildView(current, action) {\n  const {\n    payload,\n    prevKey,\n    key\n  } = action;\n  const currentKeyPosition = positionFor(current, key);\n  const afterPreviousKeyPosition = positionAfter(current, prevKey);\n  switch (action.type) {\n    case 'value':\n      if (action.payload?.exists()) {\n        let prevKey = null;\n        action.payload.forEach(payload => {\n          const action = {\n            payload,\n            type: 'value',\n            prevKey,\n            key: payload.key\n          };\n          prevKey = payload.key;\n          current = [...current, action];\n          return false;\n        });\n      }\n      return current;\n    case 'child_added':\n      if (currentKeyPosition > -1) {\n        // check that the previouskey is what we expect, else reorder\n        const previous = current[currentKeyPosition - 1];\n        if ((previous?.key || null) !== prevKey) {\n          current = current.filter(x => x.payload.key !== payload.key);\n          current.splice(afterPreviousKeyPosition, 0, action);\n        }\n      } else if (prevKey == null) {\n        return [action, ...current];\n      } else {\n        current = current.slice();\n        current.splice(afterPreviousKeyPosition, 0, action);\n      }\n      return current;\n    case 'child_removed':\n      return current.filter(x => x.payload.key !== payload.key);\n    case 'child_changed':\n      return current.map(x => x.payload.key === key ? action : x);\n    case 'child_moved':\n      if (currentKeyPosition > -1) {\n        const data = current.splice(currentKeyPosition, 1)[0];\n        current = current.slice();\n        current.splice(afterPreviousKeyPosition, 0, data);\n        return current;\n      }\n      return current;\n    // default will also remove null results\n    default:\n      return current;\n  }\n}\nfunction snapshotChanges(query, events, scheduler) {\n  events = validateEventsArray(events);\n  return listChanges(query, events, scheduler);\n}\nfunction createListReference(query, afDatabase) {\n  const outsideAngularScheduler = afDatabase.schedulers.outsideAngular;\n  const refInZone = afDatabase.schedulers.ngZone.run(() => query.ref);\n  return {\n    query,\n    update: createDataOperationMethod(refInZone, 'update'),\n    set: createDataOperationMethod(refInZone, 'set'),\n    push: data => refInZone.push(data),\n    remove: createRemoveMethod(refInZone),\n    snapshotChanges(events) {\n      return snapshotChanges(query, events, outsideAngularScheduler).pipe(keepUnstableUntilFirst);\n    },\n    stateChanges(events) {\n      return stateChanges(query, events, outsideAngularScheduler).pipe(keepUnstableUntilFirst);\n    },\n    auditTrail(events) {\n      return auditTrail(query, events, outsideAngularScheduler).pipe(keepUnstableUntilFirst);\n    },\n    valueChanges(events, options) {\n      const snapshotChanges$ = snapshotChanges(query, events, outsideAngularScheduler);\n      return snapshotChanges$.pipe(map(actions => actions.map(a => {\n        if (options && options.idField) {\n          return {\n            ...a.payload.val(),\n            ...{\n              [options.idField]: a.key\n            }\n          };\n        } else {\n          return a.payload.val();\n        }\n      })), keepUnstableUntilFirst);\n    }\n  };\n}\nfunction createObjectSnapshotChanges(query, scheduler) {\n  return function snapshotChanges() {\n    return fromRef(query, 'value', 'on', scheduler);\n  };\n}\nfunction createObjectReference(query, afDatabase) {\n  return {\n    query,\n    snapshotChanges() {\n      return createObjectSnapshotChanges(query, afDatabase.schedulers.outsideAngular)().pipe(keepUnstableUntilFirst);\n    },\n    update(data) {\n      return query.ref.update(data);\n    },\n    set(data) {\n      return query.ref.set(data);\n    },\n    remove() {\n      return query.ref.remove();\n    },\n    valueChanges() {\n      const snapshotChanges$ = createObjectSnapshotChanges(query, afDatabase.schedulers.outsideAngular)();\n      return snapshotChanges$.pipe(keepUnstableUntilFirst, map(action => action.payload.exists() ? action.payload.val() : null));\n    }\n  };\n}\nconst URL = new InjectionToken('angularfire2.realtimeDatabaseURL');\nconst USE_EMULATOR = new InjectionToken('angularfire2.database.use-emulator');\nclass AngularFireDatabase {\n  schedulers;\n  database;\n  constructor(options, name, databaseURL,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  platformId, zone, schedulers, _useEmulator,\n  // tuple isn't working here\n  auth, useAuthEmulator, authSettings,\n  // can't use firebase.auth.AuthSettings here\n  tenantId, languageCode, useDeviceLanguage, persistence, _appCheckInstances) {\n    this.schedulers = schedulers;\n    const useEmulator = _useEmulator;\n    const app = _firebaseAppFactory(options, zone, name);\n    if (auth) {\n      _authFactory(app, zone, useAuthEmulator, tenantId, languageCode, useDeviceLanguage, authSettings, persistence);\n    }\n    this.database = _cacheInstance(`${app.name}.database.${databaseURL}`, 'AngularFireDatabase', app.name, () => {\n      const database = zone.runOutsideAngular(() => app.database(databaseURL || undefined));\n      if (useEmulator) {\n        database.useEmulator(...useEmulator);\n      }\n      return database;\n    }, [useEmulator]);\n  }\n  list(pathOrRef, queryFn) {\n    const ref = this.schedulers.ngZone.runOutsideAngular(() => getRef(this.database, pathOrRef));\n    let query = ref;\n    if (queryFn) {\n      query = queryFn(ref);\n    }\n    return createListReference(query, this);\n  }\n  object(pathOrRef) {\n    const ref = this.schedulers.ngZone.runOutsideAngular(() => getRef(this.database, pathOrRef));\n    return createObjectReference(ref, this);\n  }\n  createPushId() {\n    const ref = this.schedulers.ngZone.runOutsideAngular(() => this.database.ref());\n    return ref.push().key;\n  }\n  static ɵfac = function AngularFireDatabase_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AngularFireDatabase)(i0.ɵɵinject(FIREBASE_OPTIONS), i0.ɵɵinject(FIREBASE_APP_NAME, 8), i0.ɵɵinject(URL, 8), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.ɵAngularFireSchedulers), i0.ɵɵinject(USE_EMULATOR, 8), i0.ɵɵinject(i2.AngularFireAuth, 8), i0.ɵɵinject(USE_EMULATOR$1, 8), i0.ɵɵinject(SETTINGS, 8), i0.ɵɵinject(TENANT_ID, 8), i0.ɵɵinject(LANGUAGE_CODE, 8), i0.ɵɵinject(USE_DEVICE_LANGUAGE, 8), i0.ɵɵinject(PERSISTENCE, 8), i0.ɵɵinject(i3.AppCheckInstances, 8));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AngularFireDatabase,\n    factory: AngularFireDatabase.ɵfac,\n    providedIn: 'any'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFireDatabase, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'any'\n    }]\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [FIREBASE_OPTIONS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [FIREBASE_APP_NAME]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [URL]\n    }]\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: i0.NgZone\n  }, {\n    type: i1.ɵAngularFireSchedulers\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [USE_EMULATOR]\n    }]\n  }, {\n    type: i2.AngularFireAuth,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [USE_EMULATOR$1]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [SETTINGS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [TENANT_ID]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [LANGUAGE_CODE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [USE_DEVICE_LANGUAGE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [PERSISTENCE]\n    }]\n  }, {\n    type: i3.AppCheckInstances,\n    decorators: [{\n      type: Optional\n    }]\n  }], null);\n})();\nclass AngularFireDatabaseModule {\n  constructor() {\n    firebase.registerVersion('angularfire', VERSION.full, 'rtdb-compat');\n  }\n  static ɵfac = function AngularFireDatabaseModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AngularFireDatabaseModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AngularFireDatabaseModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [AngularFireDatabase]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFireDatabaseModule, [{\n    type: NgModule,\n    args: [{\n      providers: [AngularFireDatabase]\n    }]\n  }], () => [], null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AngularFireDatabase, AngularFireDatabaseModule, URL, USE_EMULATOR, auditTrail, createListReference, fromRef, listChanges, snapshotChanges, stateChanges };\n"],
  "mappings": "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",
  "names": ["getLimitedUseToken", "getToken", "initializeAppCheck", "onTokenChanged", "setTokenAutoRefreshEnabled", "name", "auth", "name", "version", "OnDisconnect", "ref", "query", "child", "remove", "prevKey", "payload", "action", "snapshotChanges", "USE_EMULATOR", "name"]
}
